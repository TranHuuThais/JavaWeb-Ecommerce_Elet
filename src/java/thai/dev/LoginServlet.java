package thai.dev;

import thai.dev.data.model.GoogleAccount;
import thai.dev.data.model.GoogleLogin;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import thai.dev.data.dao.DatabaseDao;
import thai.dev.data.dao.UserDAO;
import thai.dev.data.model.User;

/**
 *
 * @author ACER
 */
public class LoginServlet extends BaseServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        HttpSession session = request.getSession();
        String code = request.getParameter("code");

        if (code == null || code.isEmpty()) {
            redirectWithError(session, response, "Authorization code is missing");
            return;
        }

        String accessToken;
        try {
            accessToken = new GoogleLogin().getToken(code);
        } catch (Exception e) {
            redirectWithError(session, response, "Failed to retrieve access token: " + e.getMessage());
            return;
        }

        GoogleAccount acc = new GoogleLogin().getUserInfo(accessToken);
        UserDAO userDAO = DatabaseDao.getInstance().getUserDao();
        User user = userDAO.find(acc.getEmail());

        if (user == null) {
            user = createUser(userDAO, acc.getEmail());
        }

        setUserSession(session, user);
        redirectToHomeOrDashboard(response, user);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        HttpSession session = request.getSession();

        String email = request.getParameter("email");
        String password = request.getParameter("password");

        UserDAO userDAO = DatabaseDao.getInstance().getUserDao();
        // Hash the password before checking it
        String hashedPassword = hashPassword(password);
        User user = userDAO.find(email, hashedPassword); // Use hashedPassword here

        if (user == null) {
            redirectWithError(session, response, "Login Failed");
        } else {
            setUserSession(session, user);
            redirectToHomeOrDashboard(response, user);
        }
    }

    private User createUser(UserDAO userDAO, String email) {
        String autoGeneratedPassword = hashPassword("defaultPassword123");
        User user = new User(email, autoGeneratedPassword, "user");
        userDAO.insert(user);
        System.out.println("Created new user: " + email);
        return user;
    }

    private void setUserSession(HttpSession session, User user) {
        session.setAttribute("user", user);
        session.setAttribute("role", user.getRole());
        System.out.println("User role: " + user.getRole());
    }

    private void redirectToHomeOrDashboard(HttpServletResponse response, User user) throws IOException {
        if ("admin".equals(user.getRole())) {
            response.sendRedirect("DashboardServlet");
        } else {
            response.sendRedirect("HomeServlet");
        }
    }

    private void redirectWithError(HttpSession session, HttpServletResponse response, String errorMessage) throws IOException {
        session.setAttribute("error", errorMessage);
        response.sendRedirect("login.jsp");
    }

    private String hashPassword(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] byteData = md.digest(password.getBytes());
            StringBuilder sb = new StringBuilder();
            for (byte b : byteData) {
                sb.append(String.format("%02x", b));
            }
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("Error while hashing password", e);
        }
    }
}
